package pb

import (
	"context"
	"errors"
	"time"

	"github.com/samuelsih/revo-voting/infra"
	ag "github.com/samuelsih/revo-voting/pb/autogenerated"
	"gopkg.in/guregu/null.v4"
)

type Status = string

type FindVotingMetadata = struct {
	Name        null.String `name:"name"`
	Description null.String `name:"description"`
	ImgLink     null.String `name:"img_link"`
}

const (
	serverErr Status = "error"
	expired   Status = "expired"
	notFound  Status = "not found"
	ok        Status = "ok"
)

type VotingThemeFinder interface {
	FindVotingTheme(ctx context.Context, id string, pos int) (time.Time, FindVotingMetadata, error)
}

type CheckerVotingService struct {
	VotingThemeFinder VotingThemeFinder

	ag.UnimplementedVoteStatusServiceServer
}

func (c *CheckerVotingService) CheckStatus(ctx context.Context, in *ag.Request) (*ag.Response, error) {
	if in.GetVoteId() == "" {
		return &ag.Response{Status: notFound}, nil
	}

	endAt, metadata, err := c.VotingThemeFinder.FindVotingTheme(ctx, in.GetVoteId(), int(in.GetCandidatePosition()))
	if err != nil {
		if !errors.Is(err, infra.ErrVotingThemeNotFound) {
			return &ag.Response{Status: serverErr}, err
		}

		return &ag.Response{Status: notFound}, nil
	}

	nowUTC := time.Now().UTC()
	endAtUTC := endAt.UTC()

	if endAtUTC.Before(nowUTC) {
		return &ag.Response{Status: expired}, nil
	}

	if metadata == (FindVotingMetadata{}) {
		return &ag.Response{Status: notFound}, nil
	}

	return &ag.Response{
		Status:      ok,
		Name:        metadata.Name.String,
		Description: metadata.Description.String,
		ImgLink:     metadata.ImgLink.String,
	}, nil
}
