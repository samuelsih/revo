package pb

import (
	"context"
	"errors"
	"reflect"
	"testing"
	"time"

	"github.com/samuelsih/revo-voting/infra"
	ag "github.com/samuelsih/revo-voting/pb/autogenerated"
	"gopkg.in/guregu/null.v4"
)

const testingEmptyPosition Status = "unknown candidate"

type mockFunc func(ctx context.Context, id string, pos int) (time.Time, FindVotingMetadata, error)

func (m mockFunc) FindVotingTheme(ctx context.Context, id string, pos int) (time.Time, FindVotingMetadata, error) {
	return m(ctx, id, pos)
}

func getMock(status Status) VotingThemeFinder {
	var emptyTime time.Time

	var emptyMetadata FindVotingMetadata

	var serverErrMock mockFunc = func(ctx context.Context, id string, pos int) (time.Time, FindVotingMetadata, error) {
		return emptyTime, emptyMetadata, errors.New("internal server error")
	}

	var notFoundMock mockFunc = func(ctx context.Context, id string, pos int) (time.Time, FindVotingMetadata, error) {
		return emptyTime, emptyMetadata, infra.ErrVotingThemeNotFound
	}

	var expiredMock mockFunc = func(ctx context.Context, id string, pos int) (time.Time, FindVotingMetadata, error) {
		return time.Now().Add(-1 * time.Minute), emptyMetadata, nil
	}

	var okMock mockFunc = func(ctx context.Context, id string, pos int) (time.Time, FindVotingMetadata, error) {
		return time.Now().Add(1 * time.Hour), FindVotingMetadata{
			Name:        null.StringFrom("1"),
			Description: null.StringFrom("2"),
			ImgLink:     null.StringFrom("3"),
		}, nil
	}

	var unknownCandidate mockFunc = func(ctx context.Context, id string, pos int) (time.Time, FindVotingMetadata, error) {
		return time.Now().Add(1 * time.Hour), emptyMetadata, nil
	}

	if status == ok {
		return okMock
	}

	if status == serverErr {
		return serverErrMock
	}

	if status == notFound {
		return notFoundMock
	}

	if status == expired {
		return expiredMock
	}

	return unknownCandidate
}

func TestCheckerVotingService_CheckStatus(t *testing.T) {
	t.Parallel()

	type args struct {
		ctx context.Context
		in  *ag.Request
	}

	tests := []struct {
		name    string
		c       *CheckerVotingService
		args    args
		want    *ag.Response
		wantErr bool
	}{
		{
			name:    "server error",
			c:       &CheckerVotingService{VotingThemeFinder: getMock(serverErr)},
			args:    args{ctx: context.Background(), in: &ag.Request{VoteId: "vote"}},
			want:    &ag.Response{Status: serverErr},
			wantErr: true,
		},
		{
			name:    "not found",
			c:       &CheckerVotingService{VotingThemeFinder: getMock(notFound)},
			args:    args{ctx: context.Background(), in: &ag.Request{VoteId: "vote"}},
			want:    &ag.Response{Status: notFound},
			wantErr: false,
		},
		{
			name:    "expired",
			c:       &CheckerVotingService{VotingThemeFinder: getMock(expired)},
			args:    args{ctx: context.Background(), in: &ag.Request{VoteId: "vote"}},
			want:    &ag.Response{Status: expired},
			wantErr: false,
		},
		{
			name:    "ok",
			c:       &CheckerVotingService{VotingThemeFinder: getMock(ok)},
			args:    args{ctx: context.Background(), in: &ag.Request{VoteId: "vote"}},
			want:    &ag.Response{Status: ok, Name: "1", Description: "2", ImgLink: "3"},
			wantErr: false,
		},
		{
			name:    "empty",
			c:       &CheckerVotingService{VotingThemeFinder: getMock(notFound)},
			args:    args{ctx: context.Background(), in: &ag.Request{VoteId: ""}},
			want:    &ag.Response{Status: notFound},
			wantErr: false,
		},
		{
			name:    "unknown candidate",
			c:       &CheckerVotingService{VotingThemeFinder: getMock(testingEmptyPosition)},
			args:    args{ctx: context.Background(), in: &ag.Request{VoteId: "vote"}},
			want:    &ag.Response{Status: notFound},
			wantErr: false,
		},
	}

	for _, tt := range tests {
		tt := tt

		t.Run(tt.name, func(t *testing.T) {
			t.Parallel()

			got, err := tt.c.CheckStatus(tt.args.ctx, tt.args.in)
			if (err != nil) != tt.wantErr {
				t.Errorf("CheckerVotingService.CheckStatus() error = %v, wantErr %v", err, tt.wantErr)
				return
			}
			if !reflect.DeepEqual(got, tt.want) {
				t.Errorf("CheckerVotingService.CheckStatus() = %v, want %v", got, tt.want)
			}
		})
	}
}
